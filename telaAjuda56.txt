
------------------------------------------------------------
!                                                          !
!                    ESTRUTURAS DINAMICAS                  !
!                                                          !
------------------------------------------------------------

56 - CONCEITOS FUNDAMENTAIS: Implementação de pilha com vetor

Em aplicações computacionais que precisam de uma estrutura 
de pilha, é comum sabermos de antemão o número máximo de 
elementos que podem estar armazenados simultaneamente na 
pilha, isto é, a estrutura da pilha tem um limite conhecido.
Nestes casos, a implementação da pilha pode ser feita usando
um vetor. 

A implementação com vetor é bastante simples. 


Devemos ter um vetor (vet) para armazenar os elementos da
pilha. Os elementos inseridos ocupam as primeiras posições 
do vetor. Desta forma, se temos n elementos armazenados na 
pilha, o elemento vet[n-1] representa o elemento do topo.

A estrutura que representa o tipo pilha deve, portanto, ser
composta pelo vetor e pelo número de elementos armazenados.

#define MAX 50

struct pilha {

 int n;

 float vet[MAX];

};

A função para criar a pilha aloca dinamicamente essa 
estrutura e inicializa a pilha como sendo vazia, isto é, 
com o número de elementos igual a zero.

Pilha* cria (void)
{

 Pilha* p = (Pilha*) malloc(sizeof(Pilha));

 p->n = 0; /* inicializa com zero elementos */

 return p;

}

Para inserir um elemento na pilha, usamos a próxima posição 
livre do vetor. 

Devemos ainda assegurar que exista espaço para a inserção do
novo elemento, tendo em vista que trata-se de um vetor com 
dimensão fixa.

void push (Pilha* p, float v)
{

 if (p->n == MAX) { /* capacidade esgotada */

 printf("Capacidade da pilha estourou.\n");

 exit(1); /* aborta programa */

 }

 /* insere elemento na próxima posição livre */

 p->vet[p->n] = v;

 p->n++;

}

A função pop retira o elemento do topo da pilha, fornecendo 
seu valor como retorno.

Podemos também verificar se a pilha está ou não vazia.

float pop (Pilha* p)
{

 float v;

 if (vazia(p)) {

 printf("Pilha vazia.\n");

 exit(1); /* aborta programa */

 }

 /* retira elemento do topo */

 v = p->vet[p->n-1];

 p->n--;

 return v;

}

A função que verifica se a pilha está vazia pode ser dada por:

int vazia (Pilha* p)

{

 return (p->n == 0);

}

Finalmente, a função para liberar a memória alocada pela pilha
pode ser:

void libera (Pilha* p)
{

 free(p);

}

		- W. Celes e J. L. Rangel

