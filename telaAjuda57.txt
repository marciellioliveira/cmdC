
------------------------------------------------------------
!                                                          !
!                    ESTRUTURAS DINAMICAS                  !
!                                                          !
------------------------------------------------------------

57 - CONCEITOS FUNDAMENTAIS: Implementação de pilha com lista

Quando o número máximo de elementos que serão armazenados na
pilha não é conhecido, devemos implementar a pilha usando 
uma estrutura de dados dinâmica, no caso, empregando uma 
lista encadeada. 

Os elementos são armazenados na lista e a pilha pode ser 
representada simplesmente por um ponteiro para o primeiro
nó da lista.

O nó da lista para armazenar valores reais pode ser dado por:

struct no {

 float info;

 struct no* prox;

};

typedef struct no No;

A estrutura da pilha é então simplesmente:

struct pilha {

 No* prim;

};

A função cria aloca a estrutura da pilha e inicializa a lista
como sendo vazia.

Pilha* cria (void)
{

 Pilha* p = (Pilha*) malloc(sizeof(Pilha));

 p->prim = NULL;

 return p;

}

O primeiro elemento da lista representa o topo da pilha. 

Cada novo elemento é inserido no início da lista e, 
conseqüentemente, sempre que solicitado, retiramos o elemento
também do início da lista. Desta forma, precisamos de duas 
funções auxiliares da lista: para inserir no início e para 
remover do início. Ambas as funções retornam o novo primeiro
nó da lista.

/* função auxiliar: insere no início */

No* ins_ini (No* l, float v)
{

 No* p = (No*) malloc(sizeof(No));

 p->info = v;

 p->prox = l;

 return p;

}

/* função auxiliar: retira do início */
No* ret_ini (No* l)
{

 No* p = l->prox;

 free(l);

 return p;

}

As funções que manipulam a pilha fazem uso dessas funções de
lista:

void push (Pilha* p, float v)
{

 p->prim = ins_ini(p->prim,v);

}

float pop (Pilha* p)
{

 float v;

 if (vazia(p)) {

 printf("Pilha vazia.\n");

 exit(1); /* aborta programa */

 }

 v = p->prim->info;

 p->prim = ret_ini(p->prim);

 return v;

}
A pilha estará vazia se a lista estiver vazia:
int vazia (Pilha* p)
{

 return (p->prim==NULL);

}

Por fim, a função que libera a pilha deve antes liberar 
todos os elementos da lista.

void libera (Pilha* p)
{

 No* q = p->prim;

 while (q!=NULL) {

 No* t = q->prox;

 free(q);

 q = t;

 }

 free(p);

}
A rigor, pela definição da estrutura de pilha, só temos 
acesso ao elemento do topo. No entanto, para testar o 
código, pode ser útil implementarmos uma função que 
imprima os valores armazenados na pilha. 

Os códigos abaixo ilustram a implementação dessa função
nas duas versões de pilha (vetor e lista).

A ordem de impressão adotada é do topo para a base.

/* imprime: versão com vetor */

void imprime (Pilha* p)
{
 int i;

 for (i=p->n-1; i>=0; i--)

 printf("%f\n",p->vet[i]);
}

/* imprime: versão com lista */

void imprime (Pilha* p)
{

 No* q;

 for (q=p->prim; q!=NULL; q=q->prox)

 printf("%f\n",q->info);

}

		- W. Celes e J. L. Rangel

