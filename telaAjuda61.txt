
------------------------------------------------------------
!                                                          !
!                    ESTRUTURAS DINAMICAS                  !
!                                                          !
------------------------------------------------------------

61 - CONCEITOS FUNDAMENTAIS: Implementação de fila com vetor

Como no caso da pilha, nossa primeira implementação de fila
será feita usando um vetor para armazenar os elementos. 

Para isso, devemos fixar o número máximo N de elementos na 
fila. Podemos observar que o processo de inserção e remoção 
em extremidades opostas fará com que a fila “ande” no 
vetor. 

Por exemplo, se inserirmos os elementos 1.4, 2.2, 
3.5, 4.0 e depois retirarmos dois elementos, a fila não 
estará mais nas posições iniciais do vetor.


Com essa estratégia, é fácil observar que, em um dado 
instante, a parte ocupada do vetor pode chegar à última 
posição. 

Para reaproveitar as primeiras posições livres do vetor sem
implementarmos uma re-arrumação trabalhosa dos elementos, 
podemos incrementar as posições do vetor de forma “circular”:
se o último elemento da fila ocupa a última posição do vetor,
inserimos os novos elementos a partir do início do vetor. 

Desta forma, em um dado momento, poderíamos ter quatro 
elementos, 20.0, 20.8, 21.2 e 24.3, distribuídos dois no fim 
do vetor e dois no início.

Para essa implementação, os índices do vetor são incrementados
de maneira que seus valores progridam “circularmente”. 

Desta forma, se temos 100 posições no vetor, os valores dos 
índices assumem os seguintes valores:

0, 1, 2, 3, …, 98, 99, 0, 1, 2, 3, …, 98, 99, 0, 1,…

Podemos definir uma função auxiliar responsável por incrementar
o valor de um índice.

Essa função recebe o valor do índice atual e fornece com 
valor de retorno o índice incrementado, usando o incremento
circular. 

Uma possível implementação dessa função é:

int incr (int i)
{

 if (i == N-1)

 return 0;

 else

 return i+1;

}

Essa mesma função pode ser implementada de uma forma mais 
compacta, usando o operador módulo:

int incr(int i)
{

 return (i+1)%N;

}
Com o uso do operador módulo, muitas vezes optamos inclusive 
por dispensar a função auxiliar e escrever diretamente o 
incremento circular:

...

i=(i+1)%N;

...

Podemos declarar o tipo fila como sendo uma estrutura com 
três componentes: um vetor vet de tamanho N, um índice ini 
para o início da fila e um índice fim para o fim da fila.
Conforme ilustrado nas figuras acima, usamos as seguintes 
convenções para a identificação da fila:

ini marca a posição do próximo elemento a ser retirado da 
fila; fim marca a posição (vazia), onde será inserido o 
próximo elemento.

Desta forma, a fila vazia se caracteriza por ter ini == 
fim e a fila cheia (quando não é possível inserir mais 
elementos) se caracteriza por ter fim e ini em posições 
consecutivas (circularmente): incr(fim) == ini. Note que,
com essas convenções, a posição indicada por fim permanece
sempre vazia, de forma que o número máximo de elementos na
fila é N-1.

Isto é necessário porque a inserção de mais um elemento faria
ini == fim, e haveria uma ambigüidade entre fila cheia e fila
vazia. Outra estratégia possível consiste em armazenar uma 
informação adicional, n, que indicaria explicitamente o número
de elementos armazenados na fila. 

Assim, a fila estaria vazia se n == 0 e cheia se n == N-1.
Nos exemplos que se seguem, optamos por não armazenar n 
explicitamente.

A estrutura de fila pode então ser dada por:

#define N 100

struct fila {

 int ini, fim;

 float vet[N];

};

A função para criar a fila aloca dinamicamente essa 
estrutura e inicializa a fila como sendo vazia, isto é,
com os índices ini e fim iguais entre si (no caso, 
usamos o valor zero).

Fila* cria (void)
{

 Fila* f = (Fila*) malloc(sizeof(Fila));

 f->ini = f->fim = 0; /* inicializa fila vazia */

 return f;

}

Para inserir um elemento na fila, usamos a próxima posição 
livre do vetor, indicada por fim. Devemos ainda assegurar 
que há espaço para a inserção do novo elemento, tendo em 
vista que trata-se de um vetor com capacidade limitada. 
Consideraremos que a função auxiliar que faz o incremento
circular está disponível.

void insere (Fila* f, float v)
{

 if (incr(f->fim) == f->ini) { /* fila cheia: capacidade 
esgotada */

 printf("Capacidade da fila estourou.\n");

 exit(1); /* aborta programa */

 }

 /* insere elemento na próxima posição livre */

 f->vet[f->fim] = v;

 f->fim = incr(f->fim);

}
A função para retirar o elemento do início da fila fornece
o valor do elemento retirado como retorno. 

Podemos também verificar se a fila está ou não vazia.

float retira (Fila* f)
{

 float v;

 if (vazia(f)) {

 printf("Fila vazia.\n");

 exit(1); /* aborta programa */

 }

 /* retira elemento do início */

 v = f->vet[f->ini];

 f->ini = incr(f->ini);

 return v;

}

A função que verifica se a fila está vazia pode ser dada 
por:

int vazia (Fila* f)
{

 return (f->ini == f->fim);

}

Finalmente, a função para liberar a memória alocada pela 
fila pode ser:

void libera (Fila* f)
{

 free(f);

}

		- W. Celes e J. L. Rangel

