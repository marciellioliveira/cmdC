
------------------------------------------------------------
!                                                          !
!                       ORDENAÇÃO E BUSCA                  !
!                                                          !
------------------------------------------------------------

87 - CONCEITOS FUNDAMENTAIS: Exemplo: numero de ocorrencias 
de palavras


Para exemplificar o uso de tabelas de dispersão, vamos 
considerar o desenvolvimento de um programa para exibir 
quantas vezes cada palavra foi utilizada em um dado texto.

A saída do programa será uma lista de palavras, em ordem 
decrescente do número de vezes que cada palavra ocorre no 
texto de entrada. Para simplificar, não consideraremos
caracteres acentuados.

************************************************************
	PROJETO: "DIVIDIR PARA CONQUISTAR"
************************************************************

A melhor estratégia para desenvolvermos programas é 
dividirmos um problema grande em diversos problemas menores.

Uma aplicação deve ser construída através de módulos
independentes. Cada módulo é projetado para a realização de
tarefas específicas. 

Um segundo módulo, que é cliente, não precisa conhecer detalhes
de como o primeiro foi implementado; o cliente precisa apenas 
saber a funcionalidade oferecida pelo módulo que oferece os 
serviços. Dentro de cada módulo, a realização da tarefa é 
dividida entre várias pequenas funções. 

Mais uma vez, vale a mesma regra de encapsulamento:

funções clientes não precisam conhecer detalhes de 
implementação das funções que oferecem os serviços. 

Dessa forma, aumentamos o potencial de re-uso do código e
facilitamos o entendimento e a manutenção do programa.

O programa para contar o uso das palavras é um programa 
relativamente simples, que não precisa ser subdividido em
módulos para ser construído. 

Aqui, vamos projetar o programa identificando as diversas 
funções necessárias para a construção do programa como um todo. 

Cada função tem sua finalidade específica e o programa principal
(a função main) fará uso dessas funções.

Vamos considerar que uma palavra se caracteriza por uma 
seqüência de uma ou mais letras (maiúsculas ou minúsculas).

Para contar o número de ocorrências de cada palavra,
podemos armazenar as palavras lidas numa tabela de 
dispersão, usando a própria palavra como chave de busca.

Guardaremos na estrutura de dados quantas vezes cada
palavra foi encontrada. Para isso, podemos prever a 
construção de uma função que acessa uma palavra armazenada
na tabela; se a palavra ainda não existir, a função
armazena uma nova palavra na tabela. 

Dessa forma, para cada palavra lida, conseguiremos incrementar
o número de ocorrências. Para exibir as ocorrências em ordem 
decrescente, criaremos um vetor e armazenaremos todas as
palavras que  existem na tabela de dispersão no vetor.

Esse vetor pode então ser ordenado e seu conteúdo exibido.

************************************************************
	TIPOS DOS DADOS
************************************************************

Conforme discutido acima, usaremos uma tabela de dispersão 
para contar o número de ocorrências de cada palavra no 
texto. Vamos optar por empregar a estratégia que usa lista
encadeada para o tratamento de colisões. 

Dessa forma, a dimensão da tabela de dispersão não compromete
o número máximo de palavras distintas (no entanto, a dimensão
da tabela não pode ser muito justa em relação ao número de 
elementos armazenados, pois aumentaria o número de colisões,
degradando o desempenho). 

A estrutura que define a tabela de dispersão pode ser dada 
por:

#define NPAL 64 /* dimensão máxima de cada palavra */

#define NTAB 127 /* dimensão da tabela de dispersão */

/* tipo que representa cada palavra */

struct palavra {

 char pal[NPAL];

 int n;

 struct palavra* prox; /*tratamento de colisao com 
listas*/

};

typedef struct palavra Palavra;

/* tipo que representa a tabela de dispersão */

typedef Palavra* Hash[NTAB];


************************************************************
	LEITURA DE PALAVRAS
************************************************************


A primeira função que vamos discutir é responsável por 
capturar a próxima seqüência de letras do arquivo texto. 
Essa função receberá como parâmetros o ponteiro para o
arquivo de entrada e a cadeia de caracteres que armazenará
a palavra capturada. 

A função tem como valor de retorno um inteiro que indica se 
a leitura foi bem sucedida (1) ou não (0). 

A próxima palavra é capturada pulando os caracteres 
que não são letras e, então, capturando a seqüência de 
letras do arquivo. Para identificar se um caractere é ou 
não letra, usaremos a função isalpha disponibilizada pela
interface ctype.h.

int le_palavra (FILE* fp, char* s)
{

 int i = 0;

 int c;

 /* pula caracteres que nao sao letras */

 while ((c = fgetc(fp)) != EOF) {

 if (isalpha(c))

 break;

 };

 if (c == EOF)

 return 0;

 else

 s[i++] = c; /* primeira letra já foi capturada */

 /* lê os próximos caracteres que são letras */

 while ( i<NPAL-1 && (c = fgetc(fp)) != EOF && isalpha(c))

 s[i++] = c;

 s[i] = '\0';

 return 1;

}


************************************************************
	TABELA DE DISPERSÃO COM CADEIA DE CARACTERES
************************************************************

Devemos implementar as funções responsáveis por construir e 
manipular a tabela de dispersão. A primeira função que 
precisamos é responsável por inicializar a tabela,
atribuindo o valor NULL para cada elemento.

void inicializa (Hash tab)
{

 int i;

 for (i=0; i<NTAB; i++)

 tab[i] = NULL;

}

Também precisamos definir uma função de dispersão, 
responsável por mapear a chave de busca, uma cadeia de
caracteres, em um índice da tabela. 

Uma função de dispersão simples para cadeia de caracteres
consiste em somar os código dos caracteres que compõem a 
cadeia e tirar o módulo dessa soma para se obter o
índice da tabela.

A implementação abaixo ilustra essa função.

int hash (char* s)
{

 int i;

 int total = 0;

 for (i=0; s[i]!='\0'; i++)

 total += s[i];

 return total % NTAB;

}


Precisamos ainda da função que acessa os elementos 
armazenados na tabela. Criaremos uma função que, dada
uma palavra (chave de busca), fornece como valor de 
retorno o ponteiro da estrutura Palavra associada. 
Se a palavra ainda não existir na tabela, essa função
cria uma nova palavra e fornece como retorno essa 
nova palavra criada.

Palavra *acessa (Hash tab, char* s)
{

 int h = hash(s);

 Palavra* p;

 for (p=tab[h]; p!=NULL; p=p->prox) {

 if (strcmp(p->pal,s) == 0)

 return p;

 }

 /* insere nova palavra no inicio da lista */

 p = (Palavra*) malloc(sizeof(Palavra));

 strcpy(p->pal,s);

 p->n = 0;

 p->prox = tab[h];

 tab[h] = p;

 return p;

}

Dessa forma, a função cliente será responsável por acessar
cada palavra e incrementar o seu número de ocorrências. 

Transcrevemos abaixo o trecho da função principal
reponsável por fazer essa contagem (a função completa 
será mostrada mais adiante).

 ...

 inicializa(tab);

 while (le_palavra(fp,s)) {

 Palavra* p = acessa(tab,s);

 p->n++;

 }

 ...

Com a execução desse trecho de código, cada palavra 
encontrada no texto de entrada será armazenada na tabela,
associada ao número de vezes de sua ocorrência. 

Resta-nos arrumar o resultado obtido para podermos exibir 
as palavras em ordem decrescente do número de ocorrências.


************************************************************
	EXIBIÇÃO DO RESULTADO ORDENADO
************************************************************

Para colocarmos o resultado na ordem desejada, criaremos 
dinamicamente um vetor para armazenar as palavras. 

Optaremos por construir um vetor de ponteiros para a
estrutura Palavra.

Esse vetor será então ordenado em ordem decrescente do 
número de ocorrências de cada palavra; se duas palavras 
tiverem o  mesmo número de ocorrências, usaremos a ordem
alfabética como critério de desempate.

Para criar o vetor, precisamos conhecer o número de 
palavras armazenadas na tabela de dispersão. Podemos 
implementar uma função que percorre a tabela e conta o
número de palavras existentes. Essa função pode ser dada
por:

int conta_elems (Hash tab)
{

 int i;

 int total = 0;

 Palavra* p;

 for (i=0; i<NTAB; i++) {

 for (p=tab[i]; p!=NULL; p=p->prox)

 total++;

 }

 return total;

}

Podemos agora implementar a função que cria dinamicamente o 
vetor de ponteiros. Em seguida, a função percorre os 
elementos da tabela e preenche o conteúdo do vetor. 

Essa função recebe como parâmetros de entrada o número de 
elementos e a tabela de dispersão.


Palavra** cria_vetor (int n, Hash tab)
{

 int i, j=0;

 Palavra* p;

 Palavra** vet = (Palavra**) malloc(n*sizeof(Palavra*));

 /* percorre tabela preenchendo vetor */

 for (i=0; i<NTAB; i++) {

 for (p=tab[i]; p!=NULL; p=p->prox)

 vet[j++] = p;

 }

 return vet;

}

Para ordenar o vetor (de poteiros para a estrutura Palavra)
utilizaremos a função qsort da biblioteca padrão. Precisamos
então definir a função de comparação, que é mostrada abaixo.


int compara (const void* v1, const void* v2)
{

 Palavra** pp1 = (Palavra**)v1;

 Palavra** pp2 = (Palavra**)v2;

 Palavra* p1 = *pp1;

 Palavra* p2 = *pp2;

 if (p1->n > p2->n) return -1;

 else if (p1->n < p2->n) return 1;

 else return strcmp(p1->pal,p2->pal);

}


Por fim, podemos escrever a função que, dada a tabela de
dispersão já preenchida e utilizando as funções mostradas
acima, conta o número de elementos, cria o vetor,
ordena-o e exibe o resultado na ordem desejada. 

Ao final, a função libera o vetor criado dinamicamente.


void imprime (Hash tab)
{

 int i;

 int n;

 Palavra** vet;

 /* cria e ordena vetor */

 n = conta_elems(tab);

 vet = cria_vetor(n,tab);

 qsort(vet,n,sizeof(Palavra*),compara);

 /* imprime ocorrencias */

 for (i=0; i<n; i++)

 printf("%s = %d\n",vet[i]->pal,vet[i]->n);

 /* libera vetor */

 free(vet);

}


************************************************************
	FUNÇÃO PRINCIPAL
************************************************************

Uma possível função principal desse programa é mostrada a 
seguir. Esse programa espera receber como dado de entrada 
o nome do arquivo cujas palavras queremos contar o número 
de ocorrências.

Para exemplificar a utilização dos parâmetros da função
principal, utilizamos esses parâmetros para receber o
nome do arquivo de entrada.

#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>

... /* funções auxiliares mostradas acima */
int main (int argc, char** argv)
{

 FILE* fp;

 Hash tab;

 char s[NPAL];

 if (argc != 2) {

 printf("Arquivo de entrada nao fornecido.\n");

 return 0;

 }

 /* abre arquivo para leitura */

 fp = fopen(argv[1],"rt");

 if (fp == NULL) {

 printf("Erro na abertura do arquivo.\n");

 return 0;

 }
 /* conta ocorrencia das palavras */

 inicializa(tab);

 while (le_palavra(fp,s)) {

 Palavra* p = acessa(tab,s);

 p->n++;

 }

 /* imprime ordenado */

 imprime (tab);

 return 0;
}

	W. Celes e J. L. Rangel

